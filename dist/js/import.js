/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!***********************!*\
  !*** ./src/import.js ***!
  \***********************/
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  console.log('import.js', request);
  if (request.action === "initializeImport") {
    // Instead of automatically clicking the file input, we'll just set up the onchange event
    const fileInput = document.getElementById('fileInput');
    fileInput.onchange = event => {
      const file = event.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = e => {
          try {
            const importedRules = JSON.parse(e.target.result);
            if (Array.isArray(importedRules)) {
              chrome.storage.local.get(['ajaxInterceptor_rules'], result => {
                const existingRules = result.ajaxInterceptor_rules || [];
                const newRules = [...existingRules, ...importedRules.map(rule => ({
                  ...rule,
                  id: generateUniqueId(),
                  key: buildUUID(),
                  overrideTxt: typeof rule.overrideTxt === 'object' ? JSON.stringify(rule.overrideTxt) : rule.overrideTxt
                }))];
                chrome.storage.local.set({
                  ajaxInterceptor_rules: newRules
                }, () => {
                  sendResponse({
                    success: true,
                    rules: newRules,
                    importedCount: importedRules.length
                  });
                });
              });
            } else {
              sendResponse({
                success: false,
                error: 'Invalid file format. Expected an array of rules.'
              });
            }
          } catch (error) {
            console.error('Error parsing imported rules:', error);
            sendResponse({
              success: false,
              error: 'Error importing rules. Please check the file format.'
            });
          }
        };
        reader.readAsText(file);
      }
    };

    // Send a response to indicate that the import is ready
    sendResponse({
      success: true,
      message: "Import initialized. Please select a file."
    });
    return true; // Indicates that the response will be sent asynchronously
  }
  if (request.action === "triggerFileInput") {
    const fileInput = document.getElementById('fileInput');
    fileInput.click();
  }
});
function generateUniqueId() {
  return Date.now().toString(36) + Math.random().toString(36).substr(2);
}
function buildUUID() {
  const dt = new Date().getTime();
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {
    const r = (dt + Math.random() * 16) % 16 | 0;
    return (c === 'x' ? r : r & 0x3 | 0x8).toString(16);
  });
}
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LE1BQU1DLFNBQVMsR0FBR0MsUUFBUSxDQUFDQyxjQUFjLENBQUMsV0FBVyxDQUFDO0lBQ3RERixTQUFTLENBQUN3QyxLQUFLLENBQUMsQ0FBQztFQUNyQjtBQUNKLENBQUMsQ0FBQztBQUVGLFNBQVNiLGdCQUFnQkEsQ0FBQSxFQUFHO0VBQ3hCLE9BQU9jLElBQUksQ0FBQ0MsR0FBRyxDQUFDLENBQUMsQ0FBQ0MsUUFBUSxDQUFDLEVBQUUsQ0FBQyxHQUFHQyxJQUFJLENBQUNDLE1BQU0sQ0FBQyxDQUFDLENBQUNGLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQ0csTUFBTSxDQUFDLENBQUMsQ0FBQztBQUN6RTtBQUVBLFNBQVNqQixTQUFTQSxDQUFBLEVBQUc7RUFDakIsTUFBTWtCLEVBQUUsR0FBRyxJQUFJTixJQUFJLENBQUMsQ0FBQyxDQUFDTyxPQUFPLENBQUMsQ0FBQztFQUMvQixPQUFPLHNDQUFzQyxDQUFDQyxPQUFPLENBQUMsT0FBTyxFQUFHQyxDQUFDLElBQUs7SUFDbEUsTUFBTUMsQ0FBQyxHQUFHLENBQUNKLEVBQUUsR0FBR0gsSUFBSSxDQUFDQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQztJQUM1QyxPQUFPLENBQUNLLENBQUMsS0FBSyxHQUFHLEdBQUdDLENBQUMsR0FBSUEsQ0FBQyxHQUFHLEdBQUcsR0FBSSxHQUFHLEVBQUVSLFFBQVEsQ0FBQyxFQUFFLENBQUM7RUFDekQsQ0FBQyxDQUFDO0FBQ04sQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vc3JjL2ltcG9ydC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjaHJvbWUucnVudGltZS5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIoKHJlcXVlc3QsIHNlbmRlciwgc2VuZFJlc3BvbnNlKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ2ltcG9ydC5qcycsIHJlcXVlc3QpO1xuICAgIGlmIChyZXF1ZXN0LmFjdGlvbiA9PT0gXCJpbml0aWFsaXplSW1wb3J0XCIpIHtcbiAgICAgICAgLy8gSW5zdGVhZCBvZiBhdXRvbWF0aWNhbGx5IGNsaWNraW5nIHRoZSBmaWxlIGlucHV0LCB3ZSdsbCBqdXN0IHNldCB1cCB0aGUgb25jaGFuZ2UgZXZlbnRcbiAgICAgICAgY29uc3QgZmlsZUlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZpbGVJbnB1dCcpO1xuXG4gICAgICAgIGZpbGVJbnB1dC5vbmNoYW5nZSA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmlsZSA9IGV2ZW50LnRhcmdldC5maWxlc1swXTtcbiAgICAgICAgICAgIGlmIChmaWxlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgICAgICAgICAgICByZWFkZXIub25sb2FkID0gKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGltcG9ydGVkUnVsZXMgPSBKU09OLnBhcnNlKGUudGFyZ2V0LnJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShpbXBvcnRlZFJ1bGVzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNocm9tZS5zdG9yYWdlLmxvY2FsLmdldChbJ2FqYXhJbnRlcmNlcHRvcl9ydWxlcyddLCAocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nUnVsZXMgPSByZXN1bHQuYWpheEludGVyY2VwdG9yX3J1bGVzIHx8IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdSdWxlcyA9IFsuLi5leGlzdGluZ1J1bGVzLCAuLi5pbXBvcnRlZFJ1bGVzLm1hcChydWxlID0+ICh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5ydWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGdlbmVyYXRlVW5pcXVlSWQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleTogYnVpbGRVVUlEKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVycmlkZVR4dDogdHlwZW9mIHJ1bGUub3ZlcnJpZGVUeHQgPT09ICdvYmplY3QnID8gSlNPTi5zdHJpbmdpZnkocnVsZS5vdmVycmlkZVR4dCkgOiBydWxlLm92ZXJyaWRlVHh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5zZXQoeyBhamF4SW50ZXJjZXB0b3JfcnVsZXM6IG5ld1J1bGVzIH0sICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRSZXNwb25zZSh7IHN1Y2Nlc3M6IHRydWUsIHJ1bGVzOiBuZXdSdWxlcywgaW1wb3J0ZWRDb3VudDogaW1wb3J0ZWRSdWxlcy5sZW5ndGggfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kUmVzcG9uc2UoeyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6ICdJbnZhbGlkIGZpbGUgZm9ybWF0LiBFeHBlY3RlZCBhbiBhcnJheSBvZiBydWxlcy4nIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcGFyc2luZyBpbXBvcnRlZCBydWxlczonLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZW5kUmVzcG9uc2UoeyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6ICdFcnJvciBpbXBvcnRpbmcgcnVsZXMuIFBsZWFzZSBjaGVjayB0aGUgZmlsZSBmb3JtYXQuJyB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmVhZGVyLnJlYWRBc1RleHQoZmlsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gU2VuZCBhIHJlc3BvbnNlIHRvIGluZGljYXRlIHRoYXQgdGhlIGltcG9ydCBpcyByZWFkeVxuICAgICAgICBzZW5kUmVzcG9uc2UoeyBzdWNjZXNzOiB0cnVlLCBtZXNzYWdlOiBcIkltcG9ydCBpbml0aWFsaXplZC4gUGxlYXNlIHNlbGVjdCBhIGZpbGUuXCIgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRydWU7IC8vIEluZGljYXRlcyB0aGF0IHRoZSByZXNwb25zZSB3aWxsIGJlIHNlbnQgYXN5bmNocm9ub3VzbHlcbiAgICB9XG5cbiAgICBpZiAocmVxdWVzdC5hY3Rpb24gPT09IFwidHJpZ2dlckZpbGVJbnB1dFwiKSB7XG4gICAgICAgIGNvbnN0IGZpbGVJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmaWxlSW5wdXQnKTtcbiAgICAgICAgZmlsZUlucHV0LmNsaWNrKCk7XG4gICAgfVxufSk7XG5cbmZ1bmN0aW9uIGdlbmVyYXRlVW5pcXVlSWQoKSB7XG4gICAgcmV0dXJuIERhdGUubm93KCkudG9TdHJpbmcoMzYpICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIpO1xufVxuXG5mdW5jdGlvbiBidWlsZFVVSUQoKSB7XG4gICAgY29uc3QgZHQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICByZXR1cm4gJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCAoYykgPT4ge1xuICAgICAgICBjb25zdCByID0gKGR0ICsgTWF0aC5yYW5kb20oKSAqIDE2KSAlIDE2IHwgMDtcbiAgICAgICAgcmV0dXJuIChjID09PSAneCcgPyByIDogKHIgJiAweDMpIHwgMHg4KS50b1N0cmluZygxNik7XG4gICAgfSk7XG59XG4iXSwibmFtZXMiOlsiY2hyb21lIiwicnVudGltZSIsIm9uTWVzc2FnZSIsImFkZExpc3RlbmVyIiwicmVxdWVzdCIsInNlbmRlciIsInNlbmRSZXNwb25zZSIsImNvbnNvbGUiLCJsb2ciLCJhY3Rpb24iLCJmaWxlSW5wdXQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwib25jaGFuZ2UiLCJldmVudCIsImZpbGUiLCJ0YXJnZXQiLCJmaWxlcyIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJlIiwiaW1wb3J0ZWRSdWxlcyIsIkpTT04iLCJwYXJzZSIsInJlc3VsdCIsIkFycmF5IiwiaXNBcnJheSIsInN0b3JhZ2UiLCJsb2NhbCIsImdldCIsImV4aXN0aW5nUnVsZXMiLCJhamF4SW50ZXJjZXB0b3JfcnVsZXMiLCJuZXdSdWxlcyIsIm1hcCIsInJ1bGUiLCJpZCIsImdlbmVyYXRlVW5pcXVlSWQiLCJrZXkiLCJidWlsZFVVSUQiLCJvdmVycmlkZVR4dCIsInN0cmluZ2lmeSIsInNldCIsInN1Y2Nlc3MiLCJydWxlcyIsImltcG9ydGVkQ291bnQiLCJsZW5ndGgiLCJlcnJvciIsInJlYWRBc1RleHQiLCJtZXNzYWdlIiwiY2xpY2siLCJEYXRlIiwibm93IiwidG9TdHJpbmciLCJNYXRoIiwicmFuZG9tIiwic3Vic3RyIiwiZHQiLCJnZXRUaW1lIiwicmVwbGFjZSIsImMiLCJyIl0sInNvdXJjZVJvb3QiOiIifQ==